---
import moment from "moment";

// Find all posts
const allPosts = await Astro.glob("./../pages/posts/**/*.mdx")

// Sort the posts by published data
allPosts.sort((a, b) => 
	b.frontmatter.published.localeCompare(a.frontmatter.published)
);

// Organize by calendar year
let postsByYear = {};
allPosts.map(post => {
	const year = post.frontmatter.published.substr(0, 4);
	if(postsByYear[year]) {
		postsByYear[year].push(post);
	} else {
		postsByYear[year] = [post];
	}
});
---

{Object.keys(postsByYear).sort((a, b) => b - a).map((key) => 

	<div class="calendar-year">

		<p class="billboard">{key}</p>

		<ul>
			{postsByYear[key].map((post) =>
				<li>
					<a href={post.url}>
						<span class="subheading">
							{post.frontmatter.title}
						</span>
						<time datetime={new Date(post.frontmatter.published).toUTCString()}>
							{moment(new Date(post.frontmatter.published)).utc().format("MMMM Do, YYYY")}
						</time>
					</a>
				</li>
			)}
		</div>
	</div>

)}

<style lang="scss">

	.calendar-year {
		border-top: 3px solid var(--borders);
	}

	.billboard {
		color: var(--borders);
		position: sticky;
		top: 0;
	}

	ul {
		list-style: none;
		margin: 0;
		padding: 0;

		li {
			margin-bottom: 2rem;
		}
	}

	a {
		position: relative;
		display: block;		
		outline: none;

		time {
			color: var(--foreground);
		}

		&:before {
			content: "";
			position: absolute;
			inset: -1rem;
			border: 3px dashed;
			opacity: 0;
		}

		&:focus,
		&:hover {
			&:before {
				opacity: 1;
			}
		}
	}

	time {
		display: block;
		// color: var(--borders);
	}

	/* Larger screens only */
	@media screen and (min-width: 60rem) {
		.calendar-year {
			padding: 2rem 0;
			display: flex;
			align-items: flex-start;
		}

		.billboard {
			margin-right: 2rem;
		}

	}

	/* Smaller screens only */
	@media screen and (max-width: 59.99999rem) {
		.calendar-year {
			padding: 1rem 0;
			position: relative;
		}

		.billboard {
			text-align: right;
		}
	}
</style>